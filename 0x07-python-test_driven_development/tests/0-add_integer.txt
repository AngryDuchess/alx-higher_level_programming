================================
Test cases for 0-add_integer.py
================================

This module takes two arguments and adds them as integers

Usage
======
import module:
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 5)
	7

Other valid tests
=================
	>>> add_integer(2)
	100
	>>> add_integer(5.6, 4.1)
	9
	>>> add_integer(3.4, 9)
	12
	>>> add_integer(100, -5)
	95
	>>> add_integer(-100, 5)
	-95

Invalid tests/tests that will raise errors
==========================================
	>>> add_integer(5, "alx")
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer('5', 1)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer('5', '1')
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer((5,3) , 1)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(43, (32,12,4))
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>> add_integer(0,float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

	>>> add_integer(float('inf'), float('-inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(float('inf'), 0)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
